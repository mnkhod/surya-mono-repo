// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DEV_DATABASE_URL")
}

model User {
  id        Int  @id @default(autoincrement())
  email     String @unique
  password  String
  isAdmin   Boolean
  isTutor   Boolean
  isStudent Boolean
  name      String?
  informationTutor InformationTutor?
  informationAdmin InformationAdmin?
  informationStudent InformationStudent?
}

model InformationStudent {
  id Int @id @default(autoincrement())
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  lastName String?
  firstName String?
  profileImageLink String?
  nativeLanguage Int?
  // TODO After migration to Postgresql, needed to be learningLanguages Int[]
  learningLanguages Int?
  remainingPurchase Int @default(0)
  remainingDemo Int @default(2)
  rootUser User @relation(fields: [rootUserId], references: [id])
  rootUserId Int @unique
  p2pSchedules SchedulesP2P[]
  groupSchedules SchedulesGroup[]
  birthdate DateTime @default(now())
}

model InformationTutor {
  id Int @id @default(autoincrement())
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  rootUser User @relation(fields: [rootUserId], references: [id])
  rootUserId Int @unique
  lastName String?
  firstName String?
  shortInfo String?
  videoLink String?
  profileImageLink String?
  nativeLanguage Int
  // TODO After migration to Postgresql, needed to be teachingLanguages Int[]
  teachingLanguages Int
  isApproved Boolean @default(false)
  lessonGroup LessonGroup[]
  schedulesP2p SchedulesP2P[]
}

model InformationAdmin {
  id Int @id @default(autoincrement())
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  lastName String?
  firstName String?
  rootUser User @relation(fields: [rootUserId], references: [id])
  rootUserId Int @unique
}

// TODO register when student signup
model StudentLanguageLevel {
  id Int @id @default(autoincrement())
  studentId Int
  languageLevel String
  languageId Int
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model ConfigLanguages {
  id Int @id @default(autoincrement())
  name String
  flagSVGLink String
}

model LessonGroup {
  id Int @id @default(autoincrement())
  tutor InformationTutor @relation(fields: [tutorId], references: [id])
  tutorId Int
  schedules SchedulesGroup[]
  endDate DateTime?
  registrationEndDate DateTime?
  createdAt  DateTime   @default(now())
  durationByMinutes Int @default(60)
  updatedAt  DateTime   @updatedAt
}

model SchedulesP2P {
  id Int @id @default(autoincrement())
  tutor InformationTutor? @relation(fields: [tutorId], references: [id])
  tutorId Int?
  student InformationStudent? @relation(fields: [studentId], references: [id])
  studentId Int?
  meetingDate DateTime
  meetingLink String?
  isDemo Boolean
  isPeer Boolean @default(true)
  isAvailable Boolean @default(true)
  durationByMinutes Int @default(60)
  attendanceState String?
  rescheduleRequests RescheduleRequestsP2P[]
}

model SchedulesGroup {
  id Int @id @default(autoincrement())
  lesson LessonGroup @relation(fields: [lessonId], references: [id])
  lessonId Int
  student InformationStudent @relation(fields: [studentId], references: [id])
  studentId Int
  meetingDate DateTime
  meetingLink String?
  isAvailable Boolean @default(true)
}

model RescheduleRequestsP2P {
  id Int @id @default(autoincrement())
  updatedAt  DateTime   @updatedAt
  createdAt  DateTime   @default(now())
  reasonText String
  explanationText String?
  schedule SchedulesP2P @relation(fields: [scheduleId], references: [id])
  scheduleId Int
  isPending Boolean @default(true)
  isTeacherRequest Boolean
  isStudentRequest Boolean
  isApproved Boolean?
}