// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DEV_DATABASE_URL")
}

model User {
  id        Int  @id @default(autoincrement())
  email     String @unique
  password  String
  isAdmin   Boolean
  isTutor   Boolean
  isStudent Boolean
  name      String?
  informationTutor InformationTutor?
  informationAdmin InformationAdmin?
  informationStudent InformationStudent?
}

model InformationStudent {
  id Int @id @default(autoincrement())
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  lastName String?
  firstName String?
  profileImageLink String?
  nativeLanguage Int?
  // TODO After migration to Postgresql, needed to be learningLanguages Int[]
  learningLanguages Int?
  remainingPurchase Int?
  rootUser User @relation(fields: [rootUserId], references: [id])
  rootUserId Int @unique
}

model InformationTutor {
  id Int @id @default(autoincrement())
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  rootUser User @relation(fields: [rootUserId], references: [id])
  rootUserId Int @unique
  lastName String?
  firstName String?
  shortInfo String?
  videoLink String?
  profileImageLink String?
  nativeLanguage Int?
  // TODO After migration to Postgresql, needed to be teachingLanguages Int[]
  teachingLanguages Int?
  isApproved Boolean @default(false)
  lessonP2P LessonP2P[]
  lessonGroup LessonGroup[]
}

model InformationAdmin {
  id Int @id @default(autoincrement())
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  lastName String?
  firstName String?
  rootUser User @relation(fields: [rootUserId], references: [id])
  rootUserId Int @unique
}

model ConfigLanguages {
  id Int @id @default(autoincrement())
  name String
  flagSVGLink String
}

model LessonP2P {
  id Int @id @default(autoincrement())
  title String
  information String
  tutor InformationTutor? @relation(fields: [tutorId], references: [id])
  tutorId Int
  schedules SchedulesP2P[]
}

model LessonGroup {
  id Int @id @default(autoincrement())
  title String
  information String
  tutor InformationTutor? @relation(fields: [tutorId], references: [id])
  tutorId Int
  schedules SchedulesGroup[]
  endDate DateTime
  registrationEndDate DateTime
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model SchedulesP2P {
  id Int @id @default(autoincrement())
  meetingDate DateTime
  meetingLink String?
  lesson LessonP2P @relation(fields: [lessonId], references: [id])
  lessonId Int
  isDemo Boolean
  isPeer Boolean @default(true)
  isAvailable Boolean @default(true)
  durationByMinutes Int @default(60)
}

model SchedulesGroup {
  id Int @id @default(autoincrement())
  lesson LessonGroup @relation(fields: [lessonId], references: [id])
  lessonId Int
  meetingDate DateTime
  meetingLink String?
  isDemo Boolean
  isPeer Boolean @default(true)
  isAvailable Boolean @default(true)
  durationByMinutes Int @default(60)
}